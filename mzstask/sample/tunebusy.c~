#include <stdio.h>
#define __USE_GNU
#include <sched.h>
#include <time.h>
#include <errno.h>

int main(){
  struct timespec start,end;
  unsigned long long diff_ns = 1000000000L;
  unsigned long long elapsed_ns = 0L;
  unsigned long long top=1000000L;
  double loops_per_nanos=0.0f;
  unsigned long long cnt;
  cpu_set_t cpuset;
  struct sched_param prio;
  
  CPU_ZERO(&cpuset);
  CPU_SET(0,&cpuset);

  if (sched_setaffinity(getpid(),sizeof(cpuset),&cpuset)<0){
    perror("Error setting affinity mask. Aborting");
    return 1;
  }

  prio.sched_priority = 10;

  if (sched_setscheduler(getpid(), SCHED_FIFO,&prio)<0){
    perror("Error setting priority. Aborting");
    return 2;
  }


  while (diff_ns > 100){
    clock_gettime(CLOCK_MONOTONIC, &start);
    for (cnt=0; cnt < top;cnt++){
    }
    clock_gettime(CLOCK_MONOTONIC,&end);
    elapsed_ns = (end.tv_sec * 1000000000L + end.tv_nsec);
    elapsed_ns = elapsed_ns - (start.tv_sec * 1000000000L + start.tv_nsec);
    diff_ns = 1000000 - elapsed_ns;

    loops_per_nanos = (double)top / (double)elapsed_ns;    
    printf("elapsed(%llu) ns, diff(%llu) ns top(%llu) loops per nanos (%f)\n",elapsed_ns,diff_ns,top, loops_per_nanos);
    top = 1000000 * loops_per_nanos;
  }

  printf("loops per ms: %llu\n",top);
}
